"
" MY PERSONAL VIM DEFINITIONS
"
" Author: Gustavo Pantuza
" Since: 14.08.2012


"""""""""""""""""""""""""""""""""""""""""""""""""
" FILE HANDLING
"

" Auto reload files on change
autocmd! bufwritepost .vimrc source %
set autoread

" Do not create/write backup files *.swp, *~, etc
set nobackup
set nowritebackup
set noswapfile

" filetypes
filetype plugin on
filetype indent on

" VIM7 fix for identify latex files
let g:tex_flavor='latex'

" Enables modelines. Used for comments on files to instruct vim
set modelines=1

" Load syntax for go files
autocmd BufRead,BufNewFile *.go set filetype=go

" Automatically sets folding level to be always expanded at start
set foldlevelstart=20


"""""""""""""""""""""""""""""""""""""""""""""""""
" EDITOR PREFERENCES
"

" Shell must be bash because of the plugins
set shell=/bin/bash

" Enable mouse
set mouse=a

" Enables line numbers
set number
set numberwidth=1

" Enables cursor line on insert mode
autocmd InsertEnter * set cursorline
autocmd InsertLeave * set nocursorline

" Allow buffer to be hidden
set hidden

" Once we do not use backup files we can update faster
set updatetime=300

" Reduce amount of messages in the menu
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" always show the last status bar
set laststatus=2

" Customized statusline. The function EditorModeParser changes the statusline
" color depending on the editor mode. The rest of the statusline string is
" the default statusline of VIM.
set statusline='%{statusline#EditorModeParser()}\ %<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P'

" Text at tab label
set guitablabel='%t\ %M'

" Mark the column 80 with a vertical color
let &colorcolumn=join(range(80,999),",")

" Set history and undo size
set history=1000
set undolevels=1000

" show cursor all the time
set ruler

" Tells vim that whitespaces are represented as dots
set listchars=trail:.,tab:\ \ 

" Tells vim to show whitespaces as dots
set list

" Enables auto save
autocmd InsertLeave,CursorHold,CursorHoldI,FileWritePost,FileChangedShell * :wa

" Ignored files
set wildignore+=*.pyc,*.pyo

" Makes Enter key to choose selection on auto completion pane
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Makes the auto complete searches even when you keep typing
inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Uses tab and shift tab to navigate inside completion menu
" Uncomment these 2 lines if you stop using CoC
" inoremap <expr><Tab>  pumvisible() ? '\<C-n>' : '\<Tab>'
" inoremap <expr><S-Tab>  pumvisible() ? '\<C-p>' : '\<S-Tab>'


" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction




"""""""""""""""""""""""""""""""""""""""""""""""""
" VIM COLORS
"

" Sets number of colors
set t_Co=256

" Sets VIM backgroud
set background=light

" Sets colorscheme to my personal colorscheme from ~/.vim/colors/pantuza.vim
colorscheme pantuza


"""""""""""""""""""""""""""""""""""""""""""""""""
" CODING PREFERENCES
"

" Enables syntax highlight
syntax on

" Correct backspace behavior
set bs=2

" Tabs and spaces configuration
set tabstop=4
set expandtab
set shiftwidth=4
retab

" Set the text width to 119
set textwidth=119

" Encoding
set encoding=utf8

" Sets auto indentation (disable when copying from clipboard)
set autoindent
" Respects code syntax style (specially C code)
set smartindent




"""""""""""""""""""""""""""""""""""""""""""""""""
" COPY AND PASTE
"

" Toggle paste on and off
set pastetoggle=<F2>
" Show when paste is on or off
set showmode
" Ever copy and paste from clipboard register
set clipboard=unnamed




"""""""""""""""""""""""""""""""""""""""""""""""""
" SEARCH
"

" Makes vim search case insensitive
set ignorecase
set smartcase
" Turns vim search incremental
set incsearch
" Highlight and show search matches
set hlsearch
set showmatch
" Delayed time to show matches
set matchtime=2

" Remove search results highlights
map <C-C> :nohlsearch<CR>




"""""""""""""""""""""""""""""""""""""""""""""""""
" Commands alias
"
cab W  w
cab Wq wq
cab wQ wq
cab WQ wq
cab Q  q
cab WQA wqa
cab WQa wqa
cab Wqa wqa
cab wQA wqa
cab wQa wqa
cab wqA wqa




""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS INSTALLATION
"
" Installed using vim-plug:
" https://github.com/junegunn/vim-plug
"

call plug#begin()

Plug 'scrooloose/nerdtree'
Plug 'preservim/tagbar'
Plug 'vim-scripts/c.vim'
Plug 'Rip-Rip/clang_complete'
Plug 'fatih/vim-go'
Plug 'w0rp/ale'
Plug 'terryma/vim-multiple-cursors'
Plug 'dag/vim-fish'
Plug 'hashivim/vim-terraform'
Plug 'vim-syntastic/syntastic'
Plug 'juliosueiras/vim-terraform-completion'
Plug 'ctrlpvim/ctrlp.vim'
" Syntax plugin for Ansible. It supports playbooks, Jinja2 and hosts files
Plug 'pearofducks/ansible-vim'
" Vertical identation marks for blocks. Useful for Yaml files
Plug 'Yggdroot/indentLine'
" Autocomplete plugin based on Language Server Protocol (LSP)
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'ekalinin/Dockerfile.vim'

call plug#end()




"""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS DEFINITIONS
"

" Disable ALE to conflict with Syntastic
let g:ale_emit_conflict_warnings = 0

" " Terraform customization
let g:terraform_fmt_on_save=1
let g:terraform_fold_sections=1
let g:terraform_remap_spacebar=1


" Maps the nerdtree plugin toggle
map <F4> :NERDTreeToggle<cr>
let NERDTreeMinimalUI=1
let NERDTreeRespectWildIgnore=1

" make NERDTree synced in all tabs
autocmd VimEnter * NERDTree
autocmd BufEnter * NERDTreeMirror
autocmd VimEnter * wincmd w


" Maps the Tagbar plugin toggle
map <F5> ::TagbarToggle<CR>

" - clang_complete plugin
" automatic select entries in the popup menu
let g:clang_auto_select = 2
" after completion, close the popup window
let g:clang_close_preview = 1
" Instead of use the clang tool, uses clang library (faster)
let g:clang_use_library = 1

" Disable verbose highlights on code from ale plugin
let g:ale_set_highlights = 0

" Use a soft gray color for vertical identation lines
let g:indentLine_color_term = 239

" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
let g:go_def_mapping_enabled = 0

" [CoC] Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" [CoC] Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" [CoC] Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Change Coc Floating text color
highlight CocFloating ctermbg=red ctermfg=black
highlight CocErrorFloat ctermbg=red ctermfg=black

" Maps Leader key + j or k to navigate between errors
nmap <silent> <Leader>j <Plug>(coc-diagnostic-next-error)
nmap <silent> <Leader>k <Plug>(coc-diagnostic-prev-error)


"""""""""""""""""""""""""""""""""""""""""""""""""
" KEY MAPPING
"

" Disables arrows in visual mode
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>


" Tabs navigation
noremap <silent> <leader>h :tabprevious<CR>
noremap <silent> <leader>l :tabnext<CR>

" Enter search mode
map <C-f> <CR>/
imap <C-f> <Esc><CR>/

" Select all the content file
map <C-a> ggVG

" Maps undo operation to ctrl+z
imap <C-z> <Esc><CR>ui

" Maps save operation to ctrl+s (do not work on gonome-terminal)
"map <C-s> <Esc><CR>:w
"imap <C-s> <C-o><C-s>

" Map horizontal identation to tab keys and shift_tab
" On visual mode
map <Tab> >gv
map <S-Tab> <gv
" On normal mode
nmap <Tab> >>
nmap <S-Tab> <<
" On insert mode
imap <S-Tab> <Esc><<i

" auto complete markers on insert mode
imap { {}<left>
imap ( ()<left>
imap [ []<left>
imap " <C-V>"<C-V>"<left>
imap ' <C-V>'<C-V>'<left>

" Line break on command mode
nmap <CR> o<Esc>

" Deleting character on command mode
nmap <Del> <Esc>i<Del>

" Backspace on command mode
nmap <BS> <Esc>i<BS>

" Better window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Find/Replace from word selection
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>



"""""""""""""""""""""""""""""""""""""""""""""""""
" MACROS
"

" run pep8 tool for the current python file
autocmd filetype python map <C-F8> <ESC>:w\|!clear; pep8 %<CR>

" run the current python file
autocmd filetype python map <C-F5> <ESC>:w\|!clear; python %<CR>

" run make for c files
autocmd filetype c map <C-F5> <ESC>:w\|!clear; make<CR>
"
" run make for c++ files
autocmd filetype cpp map <C-F5> <ESC>:w\|!clear; make<CR>

" Adding two spaces when editing CPP files
autocmd Filetype cpp setlocal ts=2 sts=2 sw=2

" run make for Makefiles files
autocmd filetype make map <C-F5> <ESC>:w\|!clear; make<CR>

" run make latex for tex files
autocmd filetype tex map <C-F5> <ESC>:w\|!clear; make latex<CR>
" Run spell check on current tex file
autocmd filetype tex map <C-F8> <ESC>:w\|!aspell --lang=en --mode=tex check %<CR>

" Adding spaces when editing html files
autocmd Filetype html setlocal ts=2 sts=2 sw=2

" Sets spaces when editing ruby files
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2

" Sets spaces when editing jsx files
autocmd BufRead,BufNewFile jsx setlocal ts=2 sts=2 sw=2

" Creates yaml file type and sets spaces when editing it
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Sets textwidth to 80 columns for python files
autocmd filetype python set textwidth=79

" Sets textwidth to 120 columns for Golang files
autocmd FileType go set textwidth=119
autocmd FileType go let &colorcolumn=join(range(120,999),",")

""""""""""""""""""""""""""""""""""""""""""""""""""""
" ABBREVIATIONS
"
"
autocmd filetype python :abbreviate ipdb <F2>import ipdb; ipdb.set_trace()<F2>
autocmd filetype javascript :abbreviate deb debugger;
autocmd filetype c :abbreviate pri <F2>printf("\n");<F2>
autocmd filetype cpp :abbreviate cout <F2>cout << "" << endl;<F2>
autocmd filetype go :abbreviate pri <F2>log.Printf("\n")<F2>
autocmd filetype go :abbreviate err if err != nil {<CR>log.Printf("Error: %s\n", err)<CR>}<Del><Del><Del><Del>
